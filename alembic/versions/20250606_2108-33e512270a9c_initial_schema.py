"""Initial schema

Revision ID: 33e512270a9c
Revises: 
Create Date: 2025-06-06 21:08:15.150577

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "33e512270a9c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "campus",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "campus",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_campus_email", table_name="campus")
    op.create_index(op.f("ix_campus_email"), "campus", ["email"], unique=False)
    op.alter_column(
        "chain",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "chain",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_chain_name", table_name="chain")
    op.create_index(op.f("ix_chain_name"), "chain", ["name"], unique=True)
    op.alter_column(
        "class_schedule",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "class_schedule",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_schedule_conflict_classroom", table_name="class_schedule")
    op.drop_index("idx_schedule_conflict_group", table_name="class_schedule")
    op.drop_index("idx_schedule_conflict_instructor", table_name="class_schedule")
    op.drop_index("idx_schedule_group", table_name="class_schedule")
    op.create_unique_constraint(
        "uq_schedule_conflict_classroom",
        "class_schedule",
        ["day_time_block_id", "classroom_id", "quarter_id"],
    )
    op.create_unique_constraint(
        "uq_schedule_conflict_group",
        "class_schedule",
        ["day_time_block_id", "group_id", "quarter_id"],
    )
    op.create_unique_constraint(
        "uq_schedule_conflict_instructor",
        "class_schedule",
        ["day_time_block_id", "instructor_id", "quarter_id"],
    )
    op.drop_constraint("class_schedule_ibfk_2", "class_schedule", type_="foreignkey")
    op.drop_constraint("class_schedule_ibfk_4", "class_schedule", type_="foreignkey")
    op.drop_constraint("class_schedule_ibfk_5", "class_schedule", type_="foreignkey")
    op.drop_constraint("class_schedule_ibfk_1", "class_schedule", type_="foreignkey")
    op.drop_constraint("class_schedule_ibfk_3", "class_schedule", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_class_schedule_group_id_student_group"),
        "class_schedule",
        "student_group",
        ["group_id"],
        ["group_id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_class_schedule_instructor_id_instructor"),
        "class_schedule",
        "instructor",
        ["instructor_id"],
        ["instructor_id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_class_schedule_quarter_id_quarter"),
        "class_schedule",
        "quarter",
        ["quarter_id"],
        ["quarter_id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_class_schedule_classroom_id_classroom"),
        "class_schedule",
        "classroom",
        ["classroom_id"],
        ["classroom_id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_class_schedule_day_time_block_id_day_time_block"),
        "class_schedule",
        "day_time_block",
        ["day_time_block_id"],
        ["day_time_block_id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "classroom",
        "classroom_type",
        existing_type=mysql.VARCHAR(length=50),
        server_default=None,
        existing_nullable=True,
    )
    op.alter_column(
        "classroom",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "classroom",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_classroom_number_campus", table_name="classroom")
    op.drop_constraint("classroom_ibfk_1", "classroom", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_classroom_campus_id_campus"),
        "classroom",
        "campus",
        ["campus_id"],
        ["campus_id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "contract",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "contract",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_contract_type", table_name="contract")
    op.create_index(
        op.f("ix_contract_contract_type"), "contract", ["contract_type"], unique=False
    )
    op.alter_column(
        "day",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "day",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_day_name", table_name="day")
    op.create_index(op.f("ix_day_name"), "day", ["name"], unique=True)
    op.alter_column(
        "day_time_block",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "day_time_block",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_day_time_block_unique", table_name="day_time_block")
    op.create_unique_constraint(
        "uq_day_time_block", "day_time_block", ["day_id", "time_block_id"]
    )
    op.drop_constraint("day_time_block_ibfk_2", "day_time_block", type_="foreignkey")
    op.drop_constraint("day_time_block_ibfk_1", "day_time_block", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_day_time_block_day_id_day"),
        "day_time_block",
        "day",
        ["day_id"],
        ["day_id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_day_time_block_time_block_id_time_block"),
        "day_time_block",
        "time_block",
        ["time_block_id"],
        ["time_block_id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "department",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "department",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_department_email", table_name="department")
    op.drop_index("idx_department_name", table_name="department")
    op.create_index(op.f("ix_department_email"), "department", ["email"], unique=False)
    op.create_index(op.f("ix_department_name"), "department", ["name"], unique=False)
    op.alter_column(
        "department_classroom",
        "priority",
        existing_type=mysql.INTEGER(unsigned=True),
        server_default=None,
        existing_comment="Booking priority level",
        existing_nullable=True,
    )
    op.alter_column(
        "department_classroom",
        "is_primary",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=None,
        existing_comment="Is primary classroom for department",
        existing_nullable=True,
    )
    op.alter_column(
        "department_classroom",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "department_classroom",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_classroom_department", table_name="department_classroom")
    op.drop_constraint(
        "department_classroom_ibfk_2", "department_classroom", type_="foreignkey"
    )
    op.drop_constraint(
        "department_classroom_ibfk_1", "department_classroom", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_department_classroom_classroom_id_classroom"),
        "department_classroom",
        "classroom",
        ["classroom_id"],
        ["classroom_id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_department_classroom_department_id_department"),
        "department_classroom",
        "department",
        ["department_id"],
        ["department_id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "instructor",
        "hour_count",
        existing_type=sa.DECIMAL(precision=10, scale=2),
        server_default=None,
        comment="Total assigned hours",
        existing_nullable=True,
    )
    op.alter_column(
        "instructor",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=None,
        nullable=False,
    )
    op.alter_column(
        "instructor",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "instructor",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_instructor_email", table_name="instructor")
    op.drop_index("idx_instructor_name", table_name="instructor")
    op.create_index(op.f("ix_instructor_email"), "instructor", ["email"], unique=True)
    op.create_index(
        op.f("ix_instructor_last_name"), "instructor", ["last_name"], unique=False
    )
    op.drop_constraint("instructor_ibfk_2", "instructor", type_="foreignkey")
    op.drop_constraint("instructor_ibfk_1", "instructor", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_instructor_contract_id_contract"),
        "instructor",
        "contract",
        ["contract_id"],
        ["contract_id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("fk_instructor_department_id_department"),
        "instructor",
        "department",
        ["department_id"],
        ["department_id"],
        ondelete="SET NULL",
    )
    op.alter_column(
        "level",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "level",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_level_study_type", table_name="level")
    op.create_index(op.f("ix_level_study_type"), "level", ["study_type"], unique=False)
    op.alter_column(
        "nomenclature",
        "code",
        existing_type=mysql.VARCHAR(length=20),
        comment="Abbreviation or short code",
        existing_comment="Abbreviation or short code for programs",
        existing_nullable=False,
    )
    op.alter_column(
        "nomenclature",
        "description",
        existing_type=mysql.VARCHAR(length=255),
        comment="Optional description",
        existing_comment="Optional description of this nomenclature code",
        existing_nullable=True,
    )
    op.alter_column(
        "nomenclature",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=None,
        nullable=False,
    )
    op.alter_column(
        "nomenclature",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "nomenclature",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_nomenclature_code", table_name="nomenclature")
    op.create_index(op.f("ix_nomenclature_code"), "nomenclature", ["code"], unique=True)
    op.alter_column(
        "program",
        "nomenclature_id",
        existing_type=mysql.INTEGER(unsigned=True),
        comment=None,
        existing_comment="Reference to the program abbreviation code",
        existing_nullable=True,
    )
    op.alter_column(
        "program",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "program",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_program_name", table_name="program")
    op.drop_index("idx_program_nomenclature", table_name="program")
    op.create_index(op.f("ix_program_name"), "program", ["name"], unique=False)
    op.drop_constraint("program_ibfk_2", "program", type_="foreignkey")
    op.drop_constraint("program_ibfk_3", "program", type_="foreignkey")
    op.drop_constraint("program_ibfk_1", "program", type_="foreignkey")
    op.drop_constraint("program_ibfk_4", "program", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_program_nomenclature_id_nomenclature"),
        "program",
        "nomenclature",
        ["nomenclature_id"],
        ["nomenclature_id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("fk_program_chain_id_chain"),
        "program",
        "chain",
        ["chain_id"],
        ["chain_id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("fk_program_level_id_level"),
        "program",
        "level",
        ["level_id"],
        ["level_id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("fk_program_department_id_department"),
        "program",
        "department",
        ["department_id"],
        ["department_id"],
        ondelete="SET NULL",
    )
    op.alter_column(
        "quarter",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "quarter",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_quarter_dates", table_name="quarter")
    op.drop_index("idx_quarter_name", table_name="quarter")
    op.create_unique_constraint(
        "uq_quarter_dates", "quarter", ["start_date", "end_date"]
    )
    op.alter_column(
        "role",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "role",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_role_name", table_name="role")
    op.create_index(op.f("ix_role_name"), "role", ["name"], unique=True)
    op.alter_column(
        "schedule",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "schedule",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_schedule_name", table_name="schedule")
    op.create_index(op.f("ix_schedule_name"), "schedule", ["name"], unique=True)
    op.alter_column(
        "student_group",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=None,
        nullable=False,
    )
    op.alter_column(
        "student_group",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "student_group",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_group_dates", table_name="student_group")
    op.drop_index("idx_group_number", table_name="student_group")
    op.drop_index("idx_group_program", table_name="student_group")
    op.create_index(
        op.f("ix_student_group_group_number"),
        "student_group",
        ["group_number"],
        unique=True,
    )
    op.drop_constraint("student_group_ibfk_1", "student_group", type_="foreignkey")
    op.drop_constraint("student_group_ibfk_2", "student_group", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_student_group_schedule_id_schedule"),
        "student_group",
        "schedule",
        ["schedule_id"],
        ["schedule_id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        op.f("fk_student_group_program_id_program"),
        "student_group",
        "program",
        ["program_id"],
        ["program_id"],
        ondelete="RESTRICT",
    )
    op.alter_column(
        "time_block",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "time_block",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_time_block_times", table_name="time_block")
    op.create_unique_constraint(
        "uq_time_block_times", "time_block", ["start_time", "end_time"]
    )
    op.alter_column(
        "user",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=None,
        nullable=False,
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record creation timestamp",
    )
    op.alter_column(
        "user",
        "updated_at",
        existing_type=mysql.TIMESTAMP(),
        server_default=None,
        type_=sa.DateTime(),
        nullable=False,
        comment="Record last update timestamp",
    )
    op.drop_index("idx_user_document", table_name="user")
    op.drop_index("idx_user_email", table_name="user")
    op.drop_index("idx_user_name", table_name="user")
    op.create_index(
        op.f("ix_user_document_number"), "user", ["document_number"], unique=True
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.drop_constraint("user_ibfk_1", "user", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_user_role_id_role"),
        "user",
        "role",
        ["role_id"],
        ["role_id"],
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("fk_user_role_id_role"), "user", type_="foreignkey")
    op.create_foreign_key(
        "user_ibfk_1",
        "user",
        "role",
        ["role_id"],
        ["role_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_index(op.f("ix_user_document_number"), table_name="user")
    op.create_index("idx_user_name", "user", ["last_name", "first_name"], unique=False)
    op.create_index("idx_user_email", "user", ["email"], unique=True)
    op.create_index("idx_user_document", "user", ["document_number"], unique=True)
    op.alter_column(
        "user",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "user",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "user",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=sa.text("'1'"),
        nullable=True,
    )
    op.drop_constraint("uq_time_block_times", "time_block", type_="unique")
    op.create_index(
        "idx_time_block_times", "time_block", ["start_time", "end_time"], unique=True
    )
    op.alter_column(
        "time_block",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "time_block",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint(
        op.f("fk_student_group_program_id_program"), "student_group", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_student_group_schedule_id_schedule"),
        "student_group",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "student_group_ibfk_2",
        "student_group",
        "schedule",
        ["schedule_id"],
        ["schedule_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "student_group_ibfk_1",
        "student_group",
        "program",
        ["program_id"],
        ["program_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.drop_index(op.f("ix_student_group_group_number"), table_name="student_group")
    op.create_index("idx_group_program", "student_group", ["program_id"], unique=False)
    op.create_index("idx_group_number", "student_group", ["group_number"], unique=True)
    op.create_index(
        "idx_group_dates", "student_group", ["start_date", "end_date"], unique=False
    )
    op.alter_column(
        "student_group",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "student_group",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "student_group",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=sa.text("'1'"),
        nullable=True,
    )
    op.drop_index(op.f("ix_schedule_name"), table_name="schedule")
    op.create_index("idx_schedule_name", "schedule", ["name"], unique=True)
    op.alter_column(
        "schedule",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "schedule",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_index(op.f("ix_role_name"), table_name="role")
    op.create_index("idx_role_name", "role", ["name"], unique=True)
    op.alter_column(
        "role",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "role",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint("uq_quarter_dates", "quarter", type_="unique")
    op.create_index("idx_quarter_name", "quarter", ["name"], unique=False)
    op.create_index(
        "idx_quarter_dates", "quarter", ["start_date", "end_date"], unique=True
    )
    op.alter_column(
        "quarter",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "quarter",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint(
        op.f("fk_program_department_id_department"), "program", type_="foreignkey"
    )
    op.drop_constraint(op.f("fk_program_level_id_level"), "program", type_="foreignkey")
    op.drop_constraint(op.f("fk_program_chain_id_chain"), "program", type_="foreignkey")
    op.drop_constraint(
        op.f("fk_program_nomenclature_id_nomenclature"), "program", type_="foreignkey"
    )
    op.create_foreign_key(
        "program_ibfk_4",
        "program",
        "level",
        ["level_id"],
        ["level_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "program_ibfk_1",
        "program",
        "nomenclature",
        ["nomenclature_id"],
        ["nomenclature_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "program_ibfk_3",
        "program",
        "department",
        ["department_id"],
        ["department_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "program_ibfk_2",
        "program",
        "chain",
        ["chain_id"],
        ["chain_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.drop_index(op.f("ix_program_name"), table_name="program")
    op.create_index(
        "idx_program_nomenclature", "program", ["nomenclature_id"], unique=False
    )
    op.create_index("idx_program_name", "program", ["name"], unique=False)
    op.alter_column(
        "program",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "program",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "program",
        "nomenclature_id",
        existing_type=mysql.INTEGER(unsigned=True),
        comment="Reference to the program abbreviation code",
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_nomenclature_code"), table_name="nomenclature")
    op.create_index("idx_nomenclature_code", "nomenclature", ["code"], unique=True)
    op.alter_column(
        "nomenclature",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "nomenclature",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "nomenclature",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=sa.text("'1'"),
        nullable=True,
    )
    op.alter_column(
        "nomenclature",
        "description",
        existing_type=mysql.VARCHAR(length=255),
        comment="Optional description of this nomenclature code",
        existing_comment="Optional description",
        existing_nullable=True,
    )
    op.alter_column(
        "nomenclature",
        "code",
        existing_type=mysql.VARCHAR(length=20),
        comment="Abbreviation or short code for programs",
        existing_comment="Abbreviation or short code",
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_level_study_type"), table_name="level")
    op.create_index("idx_level_study_type", "level", ["study_type"], unique=False)
    op.alter_column(
        "level",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "level",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint(
        op.f("fk_instructor_department_id_department"), "instructor", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_instructor_contract_id_contract"), "instructor", type_="foreignkey"
    )
    op.create_foreign_key(
        "instructor_ibfk_1",
        "instructor",
        "contract",
        ["contract_id"],
        ["contract_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "instructor_ibfk_2",
        "instructor",
        "department",
        ["department_id"],
        ["department_id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    op.drop_index(op.f("ix_instructor_last_name"), table_name="instructor")
    op.drop_index(op.f("ix_instructor_email"), table_name="instructor")
    op.create_index(
        "idx_instructor_name", "instructor", ["last_name", "first_name"], unique=False
    )
    op.create_index("idx_instructor_email", "instructor", ["email"], unique=True)
    op.alter_column(
        "instructor",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "instructor",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "instructor",
        "active",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=sa.text("'1'"),
        nullable=True,
    )
    op.alter_column(
        "instructor",
        "hour_count",
        existing_type=sa.DECIMAL(precision=10, scale=2),
        server_default=sa.text("'0.00'"),
        comment=None,
        existing_comment="Total assigned hours",
        existing_nullable=True,
    )
    op.drop_constraint(
        op.f("fk_department_classroom_department_id_department"),
        "department_classroom",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_department_classroom_classroom_id_classroom"),
        "department_classroom",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "department_classroom_ibfk_1",
        "department_classroom",
        "department",
        ["department_id"],
        ["department_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "department_classroom_ibfk_2",
        "department_classroom",
        "classroom",
        ["classroom_id"],
        ["classroom_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.create_index(
        "idx_classroom_department",
        "department_classroom",
        ["classroom_id", "department_id"],
        unique=False,
    )
    op.alter_column(
        "department_classroom",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "department_classroom",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "department_classroom",
        "is_primary",
        existing_type=mysql.TINYINT(display_width=1),
        server_default=sa.text("'0'"),
        existing_comment="Is primary classroom for department",
        existing_nullable=True,
    )
    op.alter_column(
        "department_classroom",
        "priority",
        existing_type=mysql.INTEGER(unsigned=True),
        server_default=sa.text("'0'"),
        existing_comment="Booking priority level",
        existing_nullable=True,
    )
    op.drop_index(op.f("ix_department_name"), table_name="department")
    op.drop_index(op.f("ix_department_email"), table_name="department")
    op.create_index("idx_department_name", "department", ["name"], unique=False)
    op.create_index("idx_department_email", "department", ["email"], unique=False)
    op.alter_column(
        "department",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "department",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint(
        op.f("fk_day_time_block_time_block_id_time_block"),
        "day_time_block",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_day_time_block_day_id_day"), "day_time_block", type_="foreignkey"
    )
    op.create_foreign_key(
        "day_time_block_ibfk_1",
        "day_time_block",
        "time_block",
        ["time_block_id"],
        ["time_block_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "day_time_block_ibfk_2",
        "day_time_block",
        "day",
        ["day_id"],
        ["day_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.drop_constraint("uq_day_time_block", "day_time_block", type_="unique")
    op.create_index(
        "idx_day_time_block_unique",
        "day_time_block",
        ["day_id", "time_block_id"],
        unique=True,
    )
    op.alter_column(
        "day_time_block",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "day_time_block",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_index(op.f("ix_day_name"), table_name="day")
    op.create_index("idx_day_name", "day", ["name"], unique=True)
    op.alter_column(
        "day",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "day",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_index(op.f("ix_contract_contract_type"), table_name="contract")
    op.create_index("idx_contract_type", "contract", ["contract_type"], unique=False)
    op.alter_column(
        "contract",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "contract",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_constraint(
        op.f("fk_classroom_campus_id_campus"), "classroom", type_="foreignkey"
    )
    op.create_foreign_key(
        "classroom_ibfk_1",
        "classroom",
        "campus",
        ["campus_id"],
        ["campus_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_index(
        "idx_classroom_number_campus",
        "classroom",
        ["room_number", "campus_id"],
        unique=True,
    )
    op.alter_column(
        "classroom",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "classroom",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.alter_column(
        "classroom",
        "classroom_type",
        existing_type=mysql.VARCHAR(length=50),
        server_default=sa.text("'Standard'"),
        existing_nullable=True,
    )
    op.drop_constraint(
        op.f("fk_class_schedule_day_time_block_id_day_time_block"),
        "class_schedule",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_class_schedule_classroom_id_classroom"),
        "class_schedule",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_class_schedule_quarter_id_quarter"),
        "class_schedule",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_class_schedule_instructor_id_instructor"),
        "class_schedule",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_class_schedule_group_id_student_group"),
        "class_schedule",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "class_schedule_ibfk_3",
        "class_schedule",
        "student_group",
        ["group_id"],
        ["group_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "class_schedule_ibfk_1",
        "class_schedule",
        "quarter",
        ["quarter_id"],
        ["quarter_id"],
        onupdate="CASCADE",
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "class_schedule_ibfk_5",
        "class_schedule",
        "classroom",
        ["classroom_id"],
        ["classroom_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "class_schedule_ibfk_4",
        "class_schedule",
        "instructor",
        ["instructor_id"],
        ["instructor_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "class_schedule_ibfk_2",
        "class_schedule",
        "day_time_block",
        ["day_time_block_id"],
        ["day_time_block_id"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    op.drop_constraint(
        "uq_schedule_conflict_instructor", "class_schedule", type_="unique"
    )
    op.drop_constraint("uq_schedule_conflict_group", "class_schedule", type_="unique")
    op.drop_constraint(
        "uq_schedule_conflict_classroom", "class_schedule", type_="unique"
    )
    op.create_index(
        "idx_schedule_group", "class_schedule", ["group_id", "quarter_id"], unique=False
    )
    op.create_index(
        "idx_schedule_conflict_instructor",
        "class_schedule",
        ["day_time_block_id", "instructor_id", "quarter_id"],
        unique=True,
    )
    op.create_index(
        "idx_schedule_conflict_group",
        "class_schedule",
        ["day_time_block_id", "group_id", "quarter_id"],
        unique=True,
    )
    op.create_index(
        "idx_schedule_conflict_classroom",
        "class_schedule",
        ["day_time_block_id", "classroom_id", "quarter_id"],
        unique=True,
    )
    op.alter_column(
        "class_schedule",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "class_schedule",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_index(op.f("ix_chain_name"), table_name="chain")
    op.create_index("idx_chain_name", "chain", ["name"], unique=True)
    op.alter_column(
        "chain",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "chain",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    op.drop_index(op.f("ix_campus_email"), table_name="campus")
    op.create_index("idx_campus_email", "campus", ["email"], unique=False)
    op.alter_column(
        "campus",
        "updated_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record last update timestamp",
    )
    op.alter_column(
        "campus",
        "created_at",
        existing_type=sa.DateTime(),
        server_default=sa.text("CURRENT_TIMESTAMP"),
        type_=mysql.TIMESTAMP(),
        nullable=True,
        comment=None,
        existing_comment="Record creation timestamp",
    )
    # ### end Alembic commands ###
